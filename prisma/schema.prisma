generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    name          String?
    username      String?
    discriminator String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    sessions         Session[]
    accounts         Account?
    guilds           Guild[]
    profiles         UserGuildProfile[]
    friendsInitiated Friendship[]       @relation("userOne")
    friendsReceived  Friendship[]       @relation("userTwo")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([username, discriminator])
}

model Account {
    id                       Int     @id @default(autoincrement())
    userId                   Int     @unique
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    expires      DateTime

    userId Int
    user   User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model VerificationToken {
    identifier Int
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Guild {
    id Int @id @default(autoincrement())

    name       String
    imageUrl   String? @db.Text
    inviteCode String  @db.Text

    ownerId Int
    owner   User @relation(fields: [ownerId], references: [id])

    members  UserGuildProfile[]
    channels Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([inviteCode])
    @@index([ownerId])
}

enum ProfileRole {
    ADMIN
    MODERATOR
    GUEST
}

model UserGuildProfile {
    id Int @id @default(autoincrement())

    image    String?
    nickname String
    role     ProfileRole @default(GUEST)

    guildId Int
    guild   Guild @relation(fields: [guildId], references: [id])

    userId Int
    user   User @relation(fields: [userId], references: [id])

    mentions  Mention[]
    reactions MessageReactionMember[]
    messages  Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([guildId, userId])
    @@index([guildId])
    @@index([userId])
}

enum Channeltype {
    TEXT
    AUDIO
    DM
    GROUP_DM
}

model Channel {
    id Int @id @default(autoincrement())

    name String
    type Channeltype @default(TEXT)

    guildId  Int?
    guild    Guild?    @relation(fields: [guildId], references: [id], onDelete: Cascade)
    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([guildId])
}

model Message {
    id Int @id @default(autoincrement())

    content String
    deleted Boolean @default(false)

    authorId Int
    author   UserGuildProfile @relation(fields: [authorId], references: [id])

    channelId Int
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    mentions    Mention[]
    reactions   MessageReaction[]
    attachments Attachment[]

    referencedMessageId Int?
    referencedMessage   Message?  @relation("referencedMessage", fields: [referencedMessageId], references: [id], onDelete: SetNull)
    serverMessage       Message[] @relation("referencedMessage")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([authorId])
    @@index([channelId])
    @@index([referencedMessageId])
}

model Attachment {
    id Int @id @default(autoincrement())

    filename    String
    contentType String
    size        Int
    width       Int?
    height      Int?
    url         String

    messageId Int
    message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([messageId])
}

model MessageReaction {
    id      Int    @id @default(autoincrement())
    number  Int
    content String

    messageId Int
    message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

    members MessageReactionMember[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([messageId])
}

model MessageReactionMember {
    id        Int @id @default(autoincrement())
    messageId Int

    reactionId Int
    reaction   MessageReaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)

    memberId Int
    member   UserGuildProfile @relation(fields: [memberId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([messageId])
    @@index([memberId])
}

model Mention {
    id        Int     @id @default(autoincrement())
    messageId Int
    message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

    memberId Int
    member   UserGuildProfile @relation(fields: [memberId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([messageId])
    @@index([memberId])
}

enum FriendshipStatus {
    PENDING
    ACCEPTED
    BLOCKED
}

model Friendship {
    id Int @id @default(autoincrement())

    userOneId Int
    userOne   User @relation("userOne", fields: [userOneId], references: [id])

    userTwoId Int
    userTwo   User @relation("userTwo", fields: [userTwoId], references: [id])

    status FriendshipStatus

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userOneId, userTwoId])
    @@index([userOneId])
    @@index([userTwoId])
}
